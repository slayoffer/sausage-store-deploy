cache:
   paths:
      - ${CI_PROJECT_DIR}/.m2/repository

variables:
   VERSION: 1.0.${CI_PIPELINE_ID}
   MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
   JAVA_OPTS: -XX:MaxRAMPercentage=90 # для того, чтобы Maven не съел всю свободную оперативку

stages:
   - build
   - release
   - notify
   - test
   - deploy

build:
   stage: build
   script:
      - cd backend
      - mvn package -Dversion.application=${VERSION} -Dmaven.repo.local=${MAVEN_REPO_PATH}
   rules: # rules и only в данных случаях взаимозаменяемы
      - changes:
           - backend/*

release:
   stage: release
   script:
      - cd backend
      - mvn deploy -DskipTests -Dversion.application=${VERSION} -Dmaven.repo.local=${MAVEN_REPO_PATH} -s settings.xml
   rules:
      - changes:
           - backend/*

slack-notification-backend:
  stage: notify
  script:
    - 'curl -X POST -H "Content-type: application/json" --data ''{"text": "Вышла новая версия backend сосисочной - ''${VERSION}''. Скачать backend можно по <https://nexus.praktikum-services.ru/repository/sausage-store-anton-evseev-backend/com/yandex/practicum/devops/sausage-store/''${VERSION}''/sausage-store-''${VERSION}''.jar|ссылке>"}'' https://hooks.slack.com/services/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'

sonarqube-backend-sast:
  stage: test
  image: maven:3.8-openjdk-16 # тот самый docker-образ, о котором мы все узнаем в будущем
  script:
    - cd backend
    - >
      #mvn verify sonar:sonar -Dsonar.qualitygate.wait=true
      #-Dsonar.projectKey=${SONAR_PROJECT_BACK_KEY}
      #-Dsonar.host.url=${SONARQUBE_URL}
      #-Dsonar.login=${SONAR_BACK_LOGIN}

deploy:
   stage: deploy
   before_script:
      #устанавливаем ssh-agent для удобства аутентификации по ssh
      - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
      - eval "$(ssh-agent -s)"
      #сохраняем сгенеренный ранее приватный ключ для раннера
      - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
      - mkdir -p ~/.ssh
      - chmod 600 ~/.ssh
      - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
      - chmod 644 ~/.ssh/known_hosts
   script:
      #выполняем простую команду для проверки
      #- ssh -oStrictHostKeyChecking=no ${BACK_USER}@${DEV_HOST} "id"
      - scp ./backend/sausage-store-backend.service ${BACK_USER}@${DEV_HOST}:/home/${BACK_USER}/sausage-store-backend.service
      - ssh ${BACK_USER}@${DEV_HOST} "export "CURRENT_VERSION=${VERSION}"; export "DEV_HOST=${DEV_HOST}";export "NEXUS_REPO_USER=${NEXUS_REPO_USER}"; export "NEXUS_BACK_REPO_URL=${NEXUS_BACK_REPO_URL}"; export "NEXUS_REPO_PASS=${NEXUS_REPO_PASS}";setsid /bin/bash -s " < ./backend/deploy.sh
   when: manual