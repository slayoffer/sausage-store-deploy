cache:
  paths:
    - frontend/dist/frontend

variables:
  VERSION: 1.0.${CI_PIPELINE_ID}

stages:
   - build
   - release
   - notify
   - test
   - deploy

build:
   stage: build
   script:
     - cd frontend
     - npm install
     - npm run build
   only:
     changes:
     - frontend/*

release:
   stage: release
   script:
    - cd frontend/dist
    - tar czvf sausage-store-${VERSION}.tar.gz frontend
    - curl -v -u "${NEXUS_REPO_USER}:${NEXUS_REPO_PASS}" --upload-file sausage-store-${VERSION}.tar.gz ${NEXUS_FRONT_REPO_URL}/${VERSION}/sausage-store-${VERSION}.tar.gz
   only:
     changes:
     - frontend/*

slack-notification-frontend:
  stage: notify
  script:
    - 'curl -X POST -H "Content-type: application/json" --data ''{"text": "Вышла новая версия frontend сосисочной - ''${VERSION}''. Скачать frontend можно по <https://nexus.praktikum-services.ru/repository/sausage-store-anton-evseev-frontend/''${VERSION}''/sausage-store-''${VERSION}''.tar.gz|ссылке>"}'' https://hooks.slack.com/services/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'

sonarqube-frontend-sast:
  stage: test
  image: sonarsource/sonar-scanner-cli:latest
  variables:
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task  
  script:
    - cd frontend
    - >
      sonar-scanner -Dsonar.qualitygate.wait=true
      -Dsonar.projectName=12_АНТОНЕВСЕЕВ_ФРОНТЕНД
      -Dsonar.projectKey=${SONAR_PROJECT_FRONT_KEY}
      -Dsonar.sources=${SONAR_FRONT_SOURCES}
      -Dsonar.host.url=${SONARQUBE_URL}
      -Dsonar.login=${SONAR_FRONT_LOGIN}
  allow_failure: true

deploy:
   stage: deploy
   before_script:
      #устанавливаем ssh-agent для удобства аутентификации по ssh
      - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
      - eval "$(ssh-agent -s)"
      #сохраняем сгенеренный ранее приватный ключ для раннера
      - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
      - mkdir -p ~/.ssh
      - chmod 600 ~/.ssh
      - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
      - chmod 644 ~/.ssh/known_hosts
   script:
      #выполняем простую команду для проверки
      # - ssh -oStrictHostKeyChecking=no ${FRONT_USER}@${DEV_HOST} "id"
      - scp ./frontend/sausage-store-frontend.service ${FRONT_USER}@${DEV_HOST}:/home/${FRONT_USER}/sausage-store-frontend.service
      - ssh ${FRONT_USER}@${DEV_HOST} "export "CURRENT_VERSION=${VERSION}"; export "DEV_HOST=${DEV_HOST}";export "NEXUS_REPO_USER=${NEXUS_REPO_USER}"; export "NEXUS_FRONT_REPO_URL=${NEXUS_FRONT_REPO_URL}"; export "NEXUS_REPO_PASS=${NEXUS_REPO_PASS}";setsid /bin/bash -s " < ./frontend/deploy.sh
   when: manual